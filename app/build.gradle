import java.nio.charset.Charset

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def AAVersion = '4.5.2'
def SupportLibVersion = '28.0.0'

File propFile =new File("E:/资料/jks/autojs-app/sign.properties");
Properties properties = new Properties()
if (propFile.exists()) {
    properties.load(new InputStreamReader(new FileInputStream(propFile), Charset.forName("utf-8")))
}

//configurations.all {
//    resolutionStrategy {
//        force "com.android.support:appcompat-v7:${SupportLibVersion}"
//        force "com.android.support:support-v4:${SupportLibVersion}"
//
//    }
//}
android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool
    defaultConfig {
        applicationId "org.autojs.autojs"
        minSdkVersion versions.mini
        targetSdkVersion versions.target
        versionCode versions.appVersionCode
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        buildConfigField "boolean","isMarket","false"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        'resourcePackageName': applicationId,
                        "androidManifestFile": "$projectDir/src/main/AndroidManifest.xml".toString()
                ]
            }
        }
    }
    buildFeatures {
        compose true
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0-alpha08'
        kotlinCompilerVersion '1.6.20'
    }
    signingConfigs {
        if (propFile.exists()) {
            release {
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
                storeFile file(properties['storeFile'])
                storePassword properties['storePassword']
            }
        }
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            // include 'arm64-v8a'  //默认提供64位版本，相比于32位，尤其在opencv、7zip、ocr等原生模块上性能提升显著，且Google明确在Android 12上只支持64位的APP，32位App将会被抛弃

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (propFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (propFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "channel"
    productFlavors {
        common {
            versionCode versions.appVersionCode
            versionName versions.appVersionName
            buildConfigField "String", "CHANNEL", '"common"'
            buildConfigField "String", "APPID", '"?id=21"'
            manifestPlaceholders = [appName: "@string/app_name"]
        }
        dev {
            applicationIdSuffix ".dev"
            versionCode versions.devVersionCode
            versionName versions.devVersionName
            buildConfigField "String", "CHANNEL", '"dev"'
            buildConfigField "String", "APPID", '"?id=23"'
            manifestPlaceholders = [appName: "Autox.js[dev]"]
        }

    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }

}
task publishApp(group: "build") {
    println "publish app"
    println "$rootDir"
    doLast {
        exec {
            //切换到sh文件所在的目录，执行脚本
            workingDir "E:/资料/jks/shell"
            //修改命令输出的地方，默认为控制台
            standardOutput = out
            //执行shell脚本
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                executable 'cmd'
                args '/c', "node scnode.js $projectDir\\build\\outputs\\apk\\common\\release $rootDir 21"
            } else {
                commandLine 'sh', '-c', "node scnode.js $projectDir\\build\\outputs\\apk\\common\\release $rootDir 21"
            }
        }
    }
}
task publishDevApp(group: "build") {
    println "publish dev app"
    println "$rootDir"
    doLast {
        exec {
            //切换到sh文件所在的目录，执行脚本
            workingDir "E:/资料/jks/shell"
            //修改命令输出的地方，默认为控制台
            standardOutput = out
            //执行shell脚本
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                executable 'cmd'
                args '/c', "node scnode.js $projectDir\\build\\outputs\\apk\\dev\\release $rootDir 23"
            } else {
                commandLine 'sh', '-c', "node scnode.js $projectDir\\build\\outputs\\apk\\dev\\release $rootDir 23"
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {

    def accompanist_version="0.24.9-beta"
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanist_version"
    implementation "com.google.accompanist:accompanist-appcompat-theme:$accompanist_version"

    implementation("io.coil-kt:coil-compose:2.0.0-rc01")
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'org.chromium.net:cronet-embedded:76.3809.111'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"


    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1-alpha01', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.13.2'
    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"
    // Android Annotations
    annotationProcessor "org.androidannotations:androidannotations:$AAVersion"
    kapt "org.androidannotations:androidannotations:$AAVersion"
    //noinspection GradleDependency
    implementation "org.androidannotations:androidannotations-api:$AAVersion"
    // ButterKnife
    implementation('com.jakewharton:butterknife:10.2.1', {
        exclude group: 'com.android.support'
    })
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    kapt 'com.jakewharton:butterknife-compiler:10.2.3'
    // Android supports
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.4.1' //
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.5.0-alpha01'
    // Personal libraries
    implementation 'com.github.hyb1996:MutableTheme:1.0.0'
    // Material Dialogs
    implementation('com.afollestad.material-dialogs:core:0.9.2.3', {
        exclude group: 'com.android.support'
    })
    // Common Markdown
    implementation 'com.github.atlassian:commonmark-java:commonmark-parent-0.9.0'
    // Android issue reporter (a github issue reporter)
    implementation('com.heinrichreimersoftware:android-issue-reporter:1.3.1', {
        exclude group: 'com.afollestad.material-dialogs'
        exclude group: 'com.android.support'
    })
    //MultiLevelListView
    implementation 'com.github.hyb1996:android-multi-level-listview:1.1'
    //Licenses Dialog
    implementation 'de.psdev.licensesdialog:licensesdialog:1.8.1'
    //Expandable RecyclerView
    implementation 'com.bignerdranch.android:expandablerecyclerview:3.0.0-RC1'
    //FlexibleDivider
    implementation 'com.yqritc:recyclerview-flexibledivider:1.4.0'
    //???
    implementation 'com.wang.avi:library:2.1.3'
    //Commons-lang
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // 证书签名相关
    implementation 'com.madgag.spongycastle:bcpkix-jdk15on:1.56.0.0'
    //Expandable RecyclerView
    implementation 'com.thoughtbot:expandablerecyclerview:1.3'
//    implementation 'org.signal.autox:apkbuilder:1.0.3'
    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    //Glide
    implementation('com.github.bumptech.glide:glide:4.8.0', {
        exclude group: 'com.android.support'
    })
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    //joda time
    implementation 'joda-time:joda-time:2.10.13'
    // Tasker Plugin
    implementation 'com.twofortyfouram:android-plugin-client-sdk-for-locale:4.0.3'
    // Flurry
    implementation 'com.flurry.android:analytics:13.1.0@aar'
    // Bugly
    implementation 'com.tencent.bugly:crashreport:4.0.0'
    // MaterialDialogCommon
    implementation('com.afollestad.material-dialogs:commons:0.9.2.3', {
        exclude group: 'com.android.support'
    })
    // Android job
    implementation 'com.evernote:android-job:1.4.2'
    // Optional, if you use support library fragments:
    implementation project(':automator')
    implementation project(':common')
    implementation project(':autojs')
    implementation project(':apkbuilder')
    implementation 'androidx.multidex:multidex:2.0.1'

    def lifecycle_version = "2.5.0-rc01"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // ViewModel utilities for Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.savedstate:savedstate-ktx:1.1.0"
    implementation "androidx.savedstate:savedstate:1.1.0"
}
